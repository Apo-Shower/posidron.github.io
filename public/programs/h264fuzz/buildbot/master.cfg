# -*- python -*-
# -*- coding: utf-8
# This Source Code Form is subject to the terms of the Mozilla Public
# License, v. 2.0. If a copy of the MPL was not distributed with this
# file, You can obtain one at http://mozilla.org/MPL/2.0/.
import os

from buildbot.buildslave import BuildSlave
from buildbot.changes.hgpoller import HgPoller
from buildbot.schedulers.basic import SingleBranchScheduler
from buildbot.schedulers.forcesched import ForceScheduler, StringParameter
from buildbot.changes import filter
from buildbot.process.factory import BuildFactory
from buildbot.steps.source.mercurial import Mercurial
from buildbot.steps.transfer import FileUpload
from buildbot.steps.shell import SetPropertyFromCommand, ShellCommand
from buildbot.process.properties import WithProperties
from buildbot.status import html, mail, web

authz_cfg=web.authz.Authz(
  auth=web.auth.BasicAuth([('m0z1ll4', 'f1r3f0x')]),
  gracefulShutdown=False,
  pingBuilder='auth',
  showUsersPage='auth',
  forceBuild='auth',
  forceAllBuilds='auth',
  cancelPendingBuild='auth',
  stopBuild='auth', 
  stopAllBuilds='auth')

LLVMdir = os.path.join(os.getenv('HOME'), 'repos/llvm')
mozconfig_dir = os.path.join(os.getenv('HOME'), 'repos/configs')
mozilla_inbound_url = 'http://hg.mozilla.org/integration/mozilla-inbound/'

make_env = lambda config_path, config_name, bundle_name: {
  'MOZCONFIG': os.path.join(config_path, config_name),
  'BundleName': bundle_name
}

mozilla_build_versions = {
  'mozilla-inbound-asan-64bit-osx-debug': make_env(mozconfig_dir, 'mozconfig.mi-asan-opt-debug'), "NightlyDebug.app"),
  'mozilla-inbound-asan-64bit-osx': make_env(mozconfig_dir, 'mozconfig.mi-asan-opt-release'), "Nightly.app")
}

def isNotInsidePackageManigest(build, name):
  path = os.path.join(build.getProperty("builddir"), 'build', build.getProperty('objdir'), 'browser/installer/package-manifest')
  with open(path) as fo:
    data = fo.read()
    return False if name in data else True

c = BuildmasterConfig = {}
c['status'] = [html.WebStatus(http_port=8010, authz=authz_cfg)]
c['title'] = 'mozilla-inbound'
c['titleURL'] = 'http://hg.mozilla.org/integration/mozilla-inbound/'
c['buildbotURL'] = 'http://localhost:8010/'
c['db'] = {'db_url' : "sqlite:///state.sqlite"}
c['slaves'] = [BuildSlave('build-slave-mozilla', 'pass')]
c['slavePortnum'] = 9989
c['change_source'] = [HgPoller(repourl=mozilla_inbound_url, pollinterval=60*60, workdir='hgpoller-workdir')]
c['schedulers'] = [
  SingleBranchScheduler(name='all',
                        change_filter=filter.ChangeFilter(branch=None),
                        treeStableTimer=5*60,
                        builderNames=mozilla_build_versions.keys()),
  ForceScheduler(name='force', builderNames=mozilla_build_versions.keys())
]
c['builders'] = []
for build_name, build_env in mozilla_build_versions.items():
  f = BuildFactory()

  obj_dir = 'obj-%s' % build_name
  dist_dir = os.path.join(obj_dir, 'dist')
  app_dir = os.path.join(dist_dir, build_env['BundleName'])

  # Update
  f.addStep(Mercurial(repourl=mozilla_inbound_url, 
                      mode='incremental', 
                      defaultBranch='default',
                      branchType='inrepo',
                      haltOnFailure=True))
  f.addStep(SetPropertyFromCommand(command='hg log --template "{node|short}" -r tip --cwd', 
                                   property='revision'))
  # Compile
  f.addStep(ShellCommand(command=['./mach', 'build'],
                         env=build_env,
                         haltOnFailure=True,
                         description='building',
                         descriptionDone='build'))

  f.addStep(ShellCommand(command=['./mach', 'buildsymbols'],
                       env=build_env,
                       haltOnFailure=True,
                       description='buildsymbols',
                       descriptionDone='buildsymbols'))
  # LLVM
  # - include: llvm-symbolizer
  f.addStep(ShellCommand(command='cp %s/build/bin/llvm-symbolizer %s/Contents/MacOS/' % (LLVMdir, app_dir),
                         haltOnFailure=True,
                         description='adding',
                         descriptionDone='add'))
  # Package
  f.addStep(ShellCommand(command=['./mach', 'package'],
                         env=build_env,
                         haltOnFailure=True,
                         description='packaging',
                         descriptionDone='package'))
  # LLVM
  # - include: libclang_rt.asan_osx_dynamic.dylib (soo hackish..)
  f.addStep(SetPropertyFromCommand(command='echo ' + obj_dir, 
                                   property='objdir'))
  f.addStep(ShellCommand(command='echo "/%s/Contents/MacOS/libclang_rt.asan_osx_dynamic.dylib" >> %s/browser/installer/package-manifest' % (build_env['BundleName'], obj_dir),
                         description='modifying',
                         descriptionDone='modify',
                         doStepIf=lambda step: isNotInsidePackageManigest(step.build, 'libclang_rt.asan_osx_dynamic.dylib')))
  f.addStep(ShellCommand(command='cp %s/build/lib/clang/3.4/lib/darwin/libclang_rt.asan_osx_dynamic.dylib %s/Contents/MacOS/' % (LLVMdir, app_dir),
                         description='adding',
                         descriptionDone='add'))
  # Re-Package (soo hackish..)
  f.addStep(ShellCommand(command=['./mach', 'package'],
                         env=build_env,
                         haltOnFailure=True,
                         description='packaging',
                         descriptionDone='package'))
  # Prepare
  f.addStep(ShellCommand(command=WithProperties('cp ' + dist_dir + '/firefox-*.dmg ' + dist_dir + '/%(revision)s.dmg'),
                         description=['preparing'],
                         descriptionDone=['prepare']))
  # - Delete after upload. Merge days will increase version number and therefore a new .dmg file is created.
  f.addStep(ShellCommand(command=WithProperties('cp ' + dist_dir + '/firefox-*.json ' + dist_dir + '/%(revision)s.json'),
                         description=['preparing'],
                         descriptionDone=['prepare']))
  f.addStep(ShellCommand(command=WithProperties('echo "%(revision)s" > ' + dist_dir + '/lkgr.txt'),
                         description=['preparing'],
                         descriptionDone=['prepare']))
  # Upload
  f.addStep(FileUpload(slavesrc=WithProperties(dist_dir + '/%(revision)s.dmg'), 
                       masterdest=WithProperties("public_html/builds/" + build_name + "/%(revision)s.dmg")))
  f.addStep(FileUpload(slavesrc=WithProperties(dist_dir + '/%(revision)s.json'), 
                       masterdest=WithProperties('public_html/builds/' + build_name + '/%(revision)s.json')))
  f.addStep(FileUpload(slavesrc=WithProperties(dist_dir + '/lkgr.txt'), 
                       masterdest=WithProperties('public_html/builds/' + build_name + '/lkgr.txt')))
  # Cleanup
  f.addStep(ShellCommand(command=WithProperties('rm ' + dist_dir + '/%(revision)s.dmg'),
                         description=['cleaning'], 
                         descriptionDone=['cleanup']))
  f.addStep(ShellCommand(command=WithProperties('rm ' + dist_dir + '/%(revision)s.json'),
                         description=['cleaning'], 
                         descriptionDone=['cleanup']))

  c['builders'].append({'name': build_name, 'slavename': 'build-slave-mozilla', 'builddir': build_name, 'factory': f})
